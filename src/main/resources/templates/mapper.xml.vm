<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="${package.Mapper}.${table.mapperName}">

#if(${enableCache})
	<!-- 开启二级缓存 -->
	<cache type="org.mybatis.caches.ehcache.LoggingEhcache"/>

#end
#if(${baseResultMap})
	<!-- 通用查询映射结果 -->
	<resultMap id="BaseResultMap" type="${package.Entity}.${entity}">
#foreach($field in ${table.fields})
#if(${field.keyFlag})##生成主键排在第一位
		<id column="${table.name}_${field.name}" property="${field.propertyName}" />
#end
#end
#foreach($field in ${table.commonFields})##生成公共字段
	<result column="${field.propertyName}" property="${field.name}" />
#end
#foreach($field in ${table.fields})
#if(!${field.keyFlag})##生成普通字段
		<result column="${table.name}_${field.name}" property="${field.propertyName}" />
#end
#end
##找出第一个id
#foreach($field in ${table.fields})
#if(${field.keyFlag})
#set( $propId = $field.propertyName )
#set( $colId = $field.name )
#break
#end
#end
#if(!$colId)
#set( $propId = $table.fields[0].propertyName )
#set( $colId = $table.fields[0].name )
#end
	</resultMap>

#end
#foreach($fieldNamesEntry in $cfg.absoluteNameStrMap.entrySet())
#if($fieldNamesEntry.key == $table.name)
	<!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        $fieldNamesEntry.value
    </sql>
#end
#end

#if($cfg.conjInfoMap.get($table.name).get('resultStr'))
	<!-- 联合查询结果集 -->
$cfg.conjInfoMap.get($table.name).get('resultStr')
	<!-- 联合查询 -->
$cfg.conjInfoMap.get($table.name).get('conjQueryStr')
#end



  <select id="selectList" resultMap="BaseResultMap" parameterType="${package.Entity}.${entity}">
  	select 
   	<include refid="Base_Column_List" />
   	from `${table.name}`
   	<where>
   		<if test="condition!=null">
			#foreach($field in ${table.fields})
    		<if test="condition.${field.propertyName}!=null">
    			and ${field.name} = #{condition.${field.propertyName},javaType=${field.columnType}}
    		</if>
			#end
    	</if>
    	${condition.customCondition}
   	</where>
   	${condition.orderby}
  </select>
  
  <select id="selectCount" parameterType="${package.Entity}.${entity}" resultType="java.lang.Integer">
  	select 
   	count(1)
   	from `${table.name}`
   	<where>
   		<if test="condition!=null">
			#foreach($field in ${table.fields})
    		<if test="condition.${field.propertyName}!=null">
    			and ${field.name} = #{condition.${field.propertyName},javaType=${field.columnType}}
    		</if>
			#end
    	</if>
    	${condition.customCondition}
   	</where>
  </select>
  
  <select id="selectMaxValue" parameterType="java.lang.String" resultType="java.lang.String">
  	select 
   	Max(${columnName})
   	from `${table.name}`
  </select>
  
  <select id="selectMaxValueByCondition" parameterType="java.lang.String" resultType="java.lang.String">
  	select 
   	Max(${columnName})
   	from `${table.name}`
   	where ${condition}
  </select>
  
  <select id="selectValue" parameterType="java.lang.String" resultType="java.lang.String">
  	select 
   	${columnName}
   	from `${table.name}`
   	where ${condition}
   	limit 0,1
  </select>
  
  <select id="selectOne" parameterType="${package.Entity}.${entity}" resultMap="BaseResultMap">
  	select 
   	<include refid="Base_Column_List" />
   	from `${table.name}`
   	<where>
   		<if test="condition!=null">
			#foreach($field in ${table.fields})
    		<if test="condition.${field.propertyName}!=null">
    			and ${field.name} = #{condition.${field.propertyName},javaType=${field.columnType}}
    		</if>
			#end
    	</if>
    	${condition.customCondition}
   	</where>
   	limit 0,1
  </select>
  
  <select id="selectPage" resultMap="BaseResultMap" parameterType="${package.Entity}.vo.PageData">
  	select 
   	<include refid="Base_Column_List" />
   	from `${table.name}`
   	<where>
   		<if test="condition!=null">
			#foreach($field in ${table.fields})
    		<if test="condition.${field.propertyName}!=null">
    			and ${field.name} = #{condition.${field.propertyName},javaType=${field.columnType}}
    		</if>
			#end
    	</if>
    	${condition.customCondition}
   	</where>
    ${orderby}
    limit #{offset },#{limit }
  </select>
  
  <insert id="insertByList" parameterType="${package.Entity}.${entity}" useGeneratedKeys="true" keyProperty="${propId}" keyColumn="${colId}">
  	insert into `${table.name}`
    values 
	<foreach collection="list" item="item" separator=",">
		(#foreach($field in ${table.fields})#{item.${field.propertyName},javaType=${field.columnType}}#if(${foreach.hasNext}) , #end #end)
    </foreach>
  </insert>
  
  <select id="selectById" resultMap="BaseResultMap" parameterType="${package.Entity}.${entity}" >
    select 
    <include refid="Base_Column_List" />
    from `${table.name}`
    where ${colId} = #{${propId},javaType=${table.fields[0].columnType}}
  </select>
  
  <delete id="deleteById" parameterType="${package.Entity}.${entity}" >
    delete from `${table.name}`
    where ${colId} = #{${propId},javaType=${table.fields[0].columnType}}
  </delete>
  
  <delete id="deleteBatchIds" parameterType="${package.Entity}.${entity}" >
    delete from `${table.name}`
    where ${colId} in 
	<foreach collection="array" item="item" open="(" separator="," close=")">
		#{item,javaType=${table.fields[0].columnType}}
	</foreach>
  </delete>
  
  <delete id="deleteByCondition" parameterType="${package.Entity}.${entity}" >
    delete from `${table.name}`
	<where>
		#foreach($field in ${table.fields})
		<if test="${field.propertyName}!=null">
			and ${field.name} = #{${field.propertyName},javaType=${field.columnType}}
		</if>
		#end
   	</where>
  </delete>
  
  <insert id="insert" parameterType="${package.Entity}.${entity}" useGeneratedKeys="true" keyProperty="${propId}" keyColumn="${colId}">
    insert into `${table.name}`
    <trim prefix="(" suffix=")" suffixOverrides="," >
	#foreach($field in ${table.fields})
	  <if test="${field.propertyName} != null" >
        ${field.name},
	  </if>
    #end
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
    #foreach($field in ${table.fields})
      <if test="${field.propertyName} != null" >
        #{${field.propertyName},javaType=${field.columnType}},
      </if>
    #end
    </trim>
  </insert>
  
  <update id="updateByIdIgnoreNull" parameterType="${package.Entity}.${entity}" >
    update `${table.name}`
    <set >
	#foreach($field in ${table.fields})
	  #if(!${field.keyFlag})
      <if test="${field.propertyName} != null" >
        ${field.name} = #{${field.propertyName},javaType=${field.columnType}},
      </if>
      #end
	#end  
    </set>
    where ${colId} = #{${propId},javaType=${table.fields[0].columnType}}
  </update>
  
  <update id="updateById" parameterType="${package.Entity}.${entity}" >
    update `${table.name}`
    set 
	#foreach($field in ${table.fields})#if(!${field.keyFlag})${field.name} = #{${field.propertyName},javaType=${field.columnType}}#if(${foreach.hasNext}),#end#end#end  
    where ${colId} = #{${propId},javaType=${table.fields[0].columnType}}
  </update>
  
  <update id="updateByPartIdIgnoreNull" parameterType="${package.Entity}.${entity}" >
    update `${table.name}`
    <set>
	#foreach($field in ${table.fields})
	  #if(!${field.keyFlag})
      <if test="entity.${field.propertyName} != null" >
        ${field.name} = #{entity.${field.propertyName},javaType=${field.columnType}},
      </if>
      #end
	#end  
    </set>
    where ${colId} = #{id,javaType=${table.fields[0].columnType}}
  </update>
  
  <update id="updateByPartId" parameterType="${package.Entity}.${entity}" >
    update `${table.name}`
    set 
	#foreach($field in ${table.fields})#if(!${field.keyFlag})${field.name} = #{entity.${field.propertyName},javaType=${field.columnType}}#if(${foreach.hasNext}),#end#end#end  
    where ${colId} = #{id,javaType=${table.fields[0].columnType}}
  </update>
  
  <update id="updateByCondition" parameterType="${package.Entity}.${entity}" >
    update `${table.name}`
    <set>
	#foreach($field in ${table.fields})
	#if(!${field.keyFlag})
      <if test="entity.${field.propertyName} != null" >
        ${field.name} = #{entity.${field.propertyName},javaType=${field.columnType}},
      </if>
    #end
	#end  
    </set>
    <where>
    #foreach($field in ${table.fields})
      <if test="condition.${field.propertyName} != null" >
        and ${field.name} = #{condition.${field.propertyName},javaType=${field.columnType}}
      </if>
	#end  
    </where>
  </update>
</mapper>
